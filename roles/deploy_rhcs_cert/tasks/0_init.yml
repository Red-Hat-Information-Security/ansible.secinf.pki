---
- name: Deploy | Pull certificate management repo
  ansible.builtin.git:
    repo: "{{ gitlab_base_url }}/{{ rhcs_certificate_management_repo }}"
    dest: "{{ rhcs_certificate_management_repo_name }}"
  delegate_to: localhost
  become: no
  run_once: true
  no_log: "{{ _not_log_sensitive | default('yes') }}"

- name: Deploy | Slurp certificate
  ansible.builtin.command:
    cmd: "cat {{ rhcs_certificate_management_repo_name }}/{{ inventory_hostname }}/certificate"
  register: _retrieved_cert
  changed_when: false
  delegate_to: localhost
  become: no

- name: Deploy | Slurp CA chain
  ansible.builtin.command:
    cmd: "cat {{ rhcs_certificate_management_repo_name }}/{{ rhcs_pki_deploy_cert_ca_chain_file }}"
  register: _ca_chain
  changed_when: false
  delegate_to: localhost
  become: no

- name: Ensure directory structure exists
  when:
    - rhcs_pki_deploy_cert_directory | length
  block:
    - name: Cert | Ensure directory structure exists
      ansible.builtin.stat:
        path: "{{ item.dest }}"
      register: _cert_dir
      failed_when:
        - not _cert_dir.stat.exists 
        - item.dest | length > 0
      loop:
        - dest: "{{ rhcs_pki_deploy_cert_directory }}"
        - dest: "{{ rhcs_pki_deploy_key_directory | d('') }}"
  rescue:
    - name: Cert | Create directory structure
      ansible.builtin.command:
        cmd: "mkdir -p {{ item.dest }}"
      when: item.dest | length > 0
      changed_when: true
      loop:
        - dest: "{{ rhcs_pki_deploy_cert_directory }}"
        - dest: "{{ rhcs_pki_deploy_key_directory | d('') }}"

- name: Cert | List content of cert management directory
  ansible.builtin.command:
    cmd: "ls {{ rhcs_pki_generate_csr_directory }}"
  register: _cert_dir_content
  changed_when: false

- name: Cert | Store cert in management directory
  ansible.builtin.copy:
    content: "{{ _retrieved_cert.stdout if rhcs_pki_cert_extension == 'crt' else _cert_with_chain }}"
    dest: "{{ rhcs_pki_generate_csr_directory }}/{{ rhcs_pki_deploy_cert_name_stub }}.{{ rhcs_pki_cert_extension }}"
    owner: 'root'
    group: 'root'
    mode: '0600'

- name: Cert | Deploy certificate and key to desired location
  ansible.builtin.copy:
    remote_src: yes
    src: "{{ rhcs_pki_generate_csr_directory }}/{{ item.name }}"
    dest: "{{ item.dest }}/{{ item.name }}"
    owner: "{{ item.owner | d('root') }}"
    group: "{{ item.group | d('root') }}"
    mode: "{{ item.mode }}"
  loop:
    - name: "{{ rhcs_pki_deploy_cert_name_stub }}.{{ rhcs_pki_cert_extension }}"
      mode: '0600'
      dest: "{{ rhcs_pki_deploy_cert_directory }}"
    - name: "{{ rhcs_pki_deploy_cert_name_stub }}.key"
      mode: '0600'
      dest: "{{ rhcs_pki_deploy_key_directory | d('') or rhcs_pki_deploy_cert_directory }}"
  when:
    - rhcs_pki_deploy_cert_directory | length

- name: Cert | Restore SELinux context on directory
  ansible.builtin.command:
    cmd: "restorecon -RF {{ item.dest }}"
  changed_when: false
  when:
    - rhcs_pki_deploy_cert_directory | length
  loop: 
    - dest: "{{ rhcs_pki_deploy_cert_directory }}"
    - dest: "{{ rhcs_pki_deploy_key_directory | d('') }}"

- name: Cert | Restart specified services
  ansible.builtin.service:
    name: "{{ item }}"
    state: restarted
  loop: "{{ rhcs_pki_deploy_cert_services_restart }}"
  when:
    - rhcs_pki_services_to_restart | length

...
